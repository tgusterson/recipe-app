{"id":"../node_modules/formatter/formatter.js","dependencies":[{"name":"E:\\Projects\\recipeapp\\package.json","includedInParent":true,"mtime":1573590222210},{"name":"E:\\Projects\\recipeapp\\node_modules\\formatter\\package.json","includedInParent":true,"mtime":1573590220893}],"generated":{"js":"var define;\n/* ~formatter~\n * \n * Simple String Variable Replacement Formatter\n * \n * -meta---\n * version:    0.1.5\n * builddate:  2012-10-30T00:00:26.204Z\n * generator:  interleave@0.5.23\n * \n * \n * \n */ \n\n// umdjs returnExports pattern: https://github.com/umdjs/umd/blob/master/returnExports.js\n(function (root, factory) {\n    if (typeof exports === 'object') {\n        module.exports = factory();\n    } else if (typeof define === 'function' && define.amd) {\n        define([], factory);\n    } else {\n        root['formatter'] = factory();\n    }\n}(this, function () {\n    var reVariable = /\\{\\{\\s*([^\\}]+?)\\s*\\}\\}/,\n        mods = {},\n        isNumber;\n        \n    // initialise the length mod\n    mods.len = function(length, padder) {\n        var testInt = parseInt(padder, 10);\n\n        // default the padder to a space\n        padder = (! isNaN(testInt)) ? testInt : (padder || ' ');\n\n        // check whether we have a number for padding (we will pad left if we do)\n        isNumber = typeof padder == 'number';\n        console.log(padder, isNumber);\n        \n        return function(input) {\n            var output = input.toString().slice(0, length);\n            \n            // pad the string to the required length\n            while (output.length < length) {\n                output = isNumber ? padder + output : output + padder;\n            }\n            \n            return output;\n        };\n    };\n    \n    function createModifiers(modifierStrings) {\n        var modifiers = [];\n        \n        for (var ii = 0, count = modifierStrings.length; ii < count; ii++) {\n            var parts = modifierStrings[ii].split(':'),\n                fn = mods[parts[0].toLowerCase()];\n            \n           if (fn) {\n               modifiers[modifiers.length] = fn.apply(null, parts.slice(1));\n           }\n        }\n        \n        return modifiers;\n    }\n    \n    function formatter(format) {\n        // extract the matches from the string\n        var parts = [], chunk, varname, varParts,\n            match = reVariable.exec(format);\n            \n        while (match) {\n            // get the prematch chunk\n            chunk = format.slice(0, match.index);\n            \n            // if we have a valid chunk, add it to the parts\n            if (chunk) {\n                parts[parts.length] = chunk;\n            }\n            \n            varParts = match[1].split(/\\s*\\|\\s*/);\n            match[1] = varParts[0];\n            \n            // extract the varname\n            varname = parseInt(match[1], 10);\n            \n            // extract the expression and add it as a function\n            parts[parts.length] = {\n                numeric: !isNaN(varname),\n                varname: varname || match[1],\n                modifiers: varParts.length > 1 ? createModifiers(varParts.slice(1)) : []\n            };\n    \n            // remove this matched chunk and replacer from the string\n            format = format.slice(match.index + match[0].length);\n            \n            // check for the next match\n            match = reVariable.exec(format);\n        }\n        \n        // if we still have some of the format string remaining, add it to the parts list\n        if (format) {\n            parts[parts.length] = format;\n        }\n        \n        return function() {\n            var output = [].concat(parts);\n            \n            // iterate through the parts list and compile the result string\n            for (var ii = output.length; ii--; ) {\n                var part = output[ii];\n                \n                if (typeof part == 'object') {\n                    // if this is a numeric part, this is a simple index lookup\n                    if (part.numeric) {\n                        output[ii] = arguments[part.varname];\n                    }\n                    // otherwise, we are doing a recursive property search\n                    else {\n                        var propNames = (part.varname || '').split('.');\n                        \n                        output[ii] = (arguments[0] || {});\n                        while (output[ii] && propNames.length > 0) {\n                            var val = output[ii][propNames.shift()];\n                            \n                            output[ii] = typeof val != 'undefined' ? val : '';\n                        }\n                    }\n                    \n                    // if we have modifiers, then tweak the output\n                    for (var modIdx = 0, count = part.modifiers.length; modIdx < count; modIdx++) {\n                        output[ii] = part.modifiers[modIdx](output[ii]);\n                    }\n                }\n            }\n            \n            // return the output\n            return output.join('');\n        };\n    }\n    \n    formatter.error = function(message) {\n        // create the format\n        var format = formatter(message);\n        \n        return function(err) {\n            var output;\n            \n            // if no error has been supplied, then pass it straight through\n            if (! err) return;\n            \n            // otherwise create a new error with the formatter message in\n            output = new Error(format.apply(null, Array.prototype.slice.call(arguments, 1)));\n            output._original = err;\n            \n            // return the new error\n            return output;\n        };\n    };\n    \n    return typeof formatter != 'undefined' ? formatter : undefined;\n}));"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/formatter/formatter.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/formatter/formatter.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}}],"sources":{"../node_modules/formatter/formatter.js":"/* ~formatter~\n * \n * Simple String Variable Replacement Formatter\n * \n * -meta---\n * version:    0.1.5\n * builddate:  2012-10-30T00:00:26.204Z\n * generator:  interleave@0.5.23\n * \n * \n * \n */ \n\n// umdjs returnExports pattern: https://github.com/umdjs/umd/blob/master/returnExports.js\n(function (root, factory) {\n    if (typeof exports === 'object') {\n        module.exports = factory();\n    } else if (typeof define === 'function' && define.amd) {\n        define([], factory);\n    } else {\n        root['formatter'] = factory();\n    }\n}(this, function () {\n    var reVariable = /\\{\\{\\s*([^\\}]+?)\\s*\\}\\}/,\n        mods = {},\n        isNumber;\n        \n    // initialise the length mod\n    mods.len = function(length, padder) {\n        var testInt = parseInt(padder, 10);\n\n        // default the padder to a space\n        padder = (! isNaN(testInt)) ? testInt : (padder || ' ');\n\n        // check whether we have a number for padding (we will pad left if we do)\n        isNumber = typeof padder == 'number';\n        console.log(padder, isNumber);\n        \n        return function(input) {\n            var output = input.toString().slice(0, length);\n            \n            // pad the string to the required length\n            while (output.length < length) {\n                output = isNumber ? padder + output : output + padder;\n            }\n            \n            return output;\n        };\n    };\n    \n    function createModifiers(modifierStrings) {\n        var modifiers = [];\n        \n        for (var ii = 0, count = modifierStrings.length; ii < count; ii++) {\n            var parts = modifierStrings[ii].split(':'),\n                fn = mods[parts[0].toLowerCase()];\n            \n           if (fn) {\n               modifiers[modifiers.length] = fn.apply(null, parts.slice(1));\n           }\n        }\n        \n        return modifiers;\n    }\n    \n    function formatter(format) {\n        // extract the matches from the string\n        var parts = [], chunk, varname, varParts,\n            match = reVariable.exec(format);\n            \n        while (match) {\n            // get the prematch chunk\n            chunk = format.slice(0, match.index);\n            \n            // if we have a valid chunk, add it to the parts\n            if (chunk) {\n                parts[parts.length] = chunk;\n            }\n            \n            varParts = match[1].split(/\\s*\\|\\s*/);\n            match[1] = varParts[0];\n            \n            // extract the varname\n            varname = parseInt(match[1], 10);\n            \n            // extract the expression and add it as a function\n            parts[parts.length] = {\n                numeric: !isNaN(varname),\n                varname: varname || match[1],\n                modifiers: varParts.length > 1 ? createModifiers(varParts.slice(1)) : []\n            };\n    \n            // remove this matched chunk and replacer from the string\n            format = format.slice(match.index + match[0].length);\n            \n            // check for the next match\n            match = reVariable.exec(format);\n        }\n        \n        // if we still have some of the format string remaining, add it to the parts list\n        if (format) {\n            parts[parts.length] = format;\n        }\n        \n        return function() {\n            var output = [].concat(parts);\n            \n            // iterate through the parts list and compile the result string\n            for (var ii = output.length; ii--; ) {\n                var part = output[ii];\n                \n                if (typeof part == 'object') {\n                    // if this is a numeric part, this is a simple index lookup\n                    if (part.numeric) {\n                        output[ii] = arguments[part.varname];\n                    }\n                    // otherwise, we are doing a recursive property search\n                    else {\n                        var propNames = (part.varname || '').split('.');\n                        \n                        output[ii] = (arguments[0] || {});\n                        while (output[ii] && propNames.length > 0) {\n                            var val = output[ii][propNames.shift()];\n                            \n                            output[ii] = typeof val != 'undefined' ? val : '';\n                        }\n                    }\n                    \n                    // if we have modifiers, then tweak the output\n                    for (var modIdx = 0, count = part.modifiers.length; modIdx < count; modIdx++) {\n                        output[ii] = part.modifiers[modIdx](output[ii]);\n                    }\n                }\n            }\n            \n            // return the output\n            return output.join('');\n        };\n    }\n    \n    formatter.error = function(message) {\n        // create the format\n        var format = formatter(message);\n        \n        return function(err) {\n            var output;\n            \n            // if no error has been supplied, then pass it straight through\n            if (! err) return;\n            \n            // otherwise create a new error with the formatter message in\n            output = new Error(format.apply(null, Array.prototype.slice.call(arguments, 1)));\n            output._original = err;\n            \n            // return the new error\n            return output;\n        };\n    };\n    \n    return typeof formatter != 'undefined' ? formatter : undefined;\n}));"},"lineCount":162}},"error":null,"hash":"f5507b61b07cb3a598a5c1d568b520c3","cacheData":{"env":{}}}