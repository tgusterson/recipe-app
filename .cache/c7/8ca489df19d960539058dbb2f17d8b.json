{"id":"../node_modules/state/lib/state-expression.js","dependencies":[{"name":"E:\\Projects\\recipeapp\\package.json","includedInParent":true,"mtime":1573341583006},{"name":"E:\\Projects\\recipeapp\\node_modules\\state\\package.json","includedInParent":true,"mtime":1573341581729},{"name":"omicron","loc":{"line":6,"column":14},"parent":"E:\\Projects\\recipeapp\\node_modules\\state\\lib\\state-expression.js","resolved":"E:\\Projects\\recipeapp\\node_modules\\omicron\\omicron.js"},{"name":"./state-function","loc":{"line":8,"column":18},"parent":"E:\\Projects\\recipeapp\\node_modules\\state\\lib\\state-expression.js","resolved":"E:\\Projects\\recipeapp\\node_modules\\state\\lib\\state-function.js"},{"name":"./state","loc":{"line":10,"column":18},"parent":"E:\\Projects\\recipeapp\\node_modules\\state\\lib\\state-expression.js","resolved":"E:\\Projects\\recipeapp\\node_modules\\state\\lib\\state.js"},{"name":"./transition-expression","loc":{"line":12,"column":33},"parent":"E:\\Projects\\recipeapp\\node_modules\\state\\lib\\state-expression.js","resolved":"E:\\Projects\\recipeapp\\node_modules\\state\\lib\\transition-expression.js"}],"generated":{"js":"// Generated by CoffeeScript 1.6.3\n(function() {\n  var GUARD_ACTIONS, O, STATE_ATTRIBUTES, STATE_ATTRIBUTE_MODIFIERS, STATE_EVENT_TYPES, STATE_EXPRESSION_CATEGORIES, STATE_EXPRESSION_CATEGORY_SYNONYMS, State, StateExpression, TransitionExpression, state,\n    __hasProp = {}.hasOwnProperty;\n\n  O = require('omicron');\n\n  state = require('./state-function');\n\n  State = require('./state');\n\n  TransitionExpression = require('./transition-expression');\n\n  STATE_ATTRIBUTES = state.STATE_ATTRIBUTES, STATE_ATTRIBUTE_MODIFIERS = state.STATE_ATTRIBUTE_MODIFIERS, STATE_EXPRESSION_CATEGORIES = state.STATE_EXPRESSION_CATEGORIES, STATE_EXPRESSION_CATEGORY_SYNONYMS = state.STATE_EXPRESSION_CATEGORY_SYNONYMS, STATE_EVENT_TYPES = state.STATE_EVENT_TYPES, GUARD_ACTIONS = state.GUARD_ACTIONS;\n\n  module.exports = StateExpression = (function() {\n    var NIL, NORMAL, assign, attributeFlags, attributeMap, categoryMap, clone, decode, edit, encode, eventTypes, guardActions, interpret, invert, isArray, isNumber, isPlainObject, synonymMap, untype;\n\n    NIL = O.NIL, isNumber = O.isNumber, isPlainObject = O.isPlainObject, isArray = O.isArray;\n\n    assign = O.assign, edit = O.edit, clone = O.clone, invert = O.invert;\n\n    NORMAL = STATE_ATTRIBUTES.NORMAL;\n\n    attributeMap = (function() {\n      var key, object, value, _ref;\n      _ref = object = assign(STATE_ATTRIBUTE_MODIFIERS);\n      for (key in _ref) {\n        value = _ref[key];\n        object[key] = key.toUpperCase();\n      }\n      return object;\n    })();\n\n    attributeFlags = (function() {\n      var key, object, value, _ref;\n      _ref = object = invert(STATE_ATTRIBUTES);\n      for (key in _ref) {\n        value = _ref[key];\n        object[key] = value.toLowerCase();\n      }\n      return object;\n    })();\n\n    categoryMap = assign(STATE_EXPRESSION_CATEGORIES);\n\n    synonymMap = STATE_EXPRESSION_CATEGORY_SYNONYMS;\n\n    eventTypes = assign(STATE_EVENT_TYPES);\n\n    guardActions = assign(GUARD_ACTIONS);\n\n    function StateExpression(attributes, expr) {\n      if (typeof attributes === 'string') {\n        expr || (expr = {});\n      } else if (expr == null) {\n        expr = attributes;\n        attributes = void 0;\n      }\n      if (!(expr instanceof StateExpression)) {\n        expr = interpret(expr);\n      }\n      edit('deep all', this, expr);\n      if (attributes != null) {\n        if (!isNumber(attributes)) {\n          attributes = encode(attributes);\n        }\n      } else {\n        if (expr) {\n          attributes = expr.attributes;\n        }\n      }\n      this.attributes = attributes || NORMAL;\n    }\n\n    interpret = function(expr) {\n      var category, item, key, object, result, type, value, _ref, _ref1, _ref2, _ref3;\n      result = assign(STATE_EXPRESSION_CATEGORIES, null);\n      for (key in expr) {\n        if (!__hasProp.call(expr, key)) continue;\n        value = expr[key];\n        category = categoryMap[key] || synonymMap[key];\n        if ((category != null) && (value != null)) {\n          result[category] = typeof value === 'string' ? value : isArray(value) ? value.slice(0) : clone(result[category], value);\n          continue;\n        }\n        category = value === state || value instanceof StateExpression ? 'substates' : value instanceof TransitionExpression ? 'transitions' : void 0;\n        if (category != null) {\n          item = result[category] || (result[category] = {});\n          item[key] = value;\n          continue;\n        }\n        category = (eventTypes[key] != null) || typeof value === 'string' ? 'events' : guardActions[key] != null ? 'guards' : typeof value === 'function' || (type = value != null ? value.type : void 0) && (type === 'state-bound-function' || type === 'state-fixed-function') ? 'methods' : value === NIL || isPlainObject(value) ? 'substates' : void 0;\n        if (category != null) {\n          item = result[category] || (result[category] = {});\n          item[key] = value;\n          continue;\n        }\n      }\n      _ref = object = result.events;\n      for (key in _ref) {\n        if (!__hasProp.call(_ref, key)) continue;\n        value = _ref[key];\n        if (!isArray(value)) {\n          object[key] = [value];\n        }\n      }\n      _ref1 = object = result.guards;\n      for (key in _ref1) {\n        if (!__hasProp.call(_ref1, key)) continue;\n        value = _ref1[key];\n        if (!isPlainObject(value)) {\n          object[key] = {\n            '*': value\n          };\n        }\n      }\n      _ref2 = object = result.transitions;\n      for (key in _ref2) {\n        if (!__hasProp.call(_ref2, key)) continue;\n        value = _ref2[key];\n        if (!(value === NIL || value instanceof TransitionExpression)) {\n          object[key] = new TransitionExpression(value);\n        }\n      }\n      _ref3 = object = result.substates;\n      for (key in _ref3) {\n        if (!__hasProp.call(_ref3, key)) continue;\n        value = _ref3[key];\n        if (value === state) {\n          object[key] = new StateExpression;\n        } else if (value instanceof State) {\n          object[key] = value.express(true);\n        } else if (!(value === NIL || value instanceof StateExpression)) {\n          object[key] = new StateExpression(value);\n        }\n      }\n      return result;\n    };\n\n    encode = function(attributes) {\n      var key, result, value;\n      if (typeof attributes === 'string') {\n        attributes = assign(attributes);\n      }\n      result = NORMAL;\n      for (key in attributes) {\n        if (!__hasProp.call(attributes, key)) continue;\n        value = attributes[key];\n        if (key in attributeMap) {\n          result |= STATE_ATTRIBUTES[attributeMap[key]];\n        }\n      }\n      return result;\n    };\n\n    decode = function(number) {\n      var key, value;\n      return ((function() {\n        var _results;\n        _results = [];\n        for (key in attributeFlags) {\n          value = attributeFlags[key];\n          if (number & key) {\n            _results.push(value);\n          }\n        }\n        return _results;\n      })()).join(' ');\n    };\n\n    StateExpression.untype = untype = function(expr) {\n      var key, name, result, s, subexpr, value, _ref;\n      result = {};\n      for (key in expr) {\n        if (!__hasProp.call(expr, key)) continue;\n        value = expr[key];\n        result[key] = value;\n      }\n      _ref = s = result.states;\n      for (name in _ref) {\n        subexpr = _ref[name];\n        s[name] = untype(subexpr);\n      }\n      return result;\n    };\n\n    StateExpression.encodeAttributes = encode;\n\n    StateExpression.decodeAttributes = decode;\n\n    return StateExpression;\n\n  })();\n\n}).call(this);\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/state/lib/state-expression.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/state/lib/state-expression.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}}],"sources":{"../node_modules/state/lib/state-expression.js":"// Generated by CoffeeScript 1.6.3\n(function() {\n  var GUARD_ACTIONS, O, STATE_ATTRIBUTES, STATE_ATTRIBUTE_MODIFIERS, STATE_EVENT_TYPES, STATE_EXPRESSION_CATEGORIES, STATE_EXPRESSION_CATEGORY_SYNONYMS, State, StateExpression, TransitionExpression, state,\n    __hasProp = {}.hasOwnProperty;\n\n  O = require('omicron');\n\n  state = require('./state-function');\n\n  State = require('./state');\n\n  TransitionExpression = require('./transition-expression');\n\n  STATE_ATTRIBUTES = state.STATE_ATTRIBUTES, STATE_ATTRIBUTE_MODIFIERS = state.STATE_ATTRIBUTE_MODIFIERS, STATE_EXPRESSION_CATEGORIES = state.STATE_EXPRESSION_CATEGORIES, STATE_EXPRESSION_CATEGORY_SYNONYMS = state.STATE_EXPRESSION_CATEGORY_SYNONYMS, STATE_EVENT_TYPES = state.STATE_EVENT_TYPES, GUARD_ACTIONS = state.GUARD_ACTIONS;\n\n  module.exports = StateExpression = (function() {\n    var NIL, NORMAL, assign, attributeFlags, attributeMap, categoryMap, clone, decode, edit, encode, eventTypes, guardActions, interpret, invert, isArray, isNumber, isPlainObject, synonymMap, untype;\n\n    NIL = O.NIL, isNumber = O.isNumber, isPlainObject = O.isPlainObject, isArray = O.isArray;\n\n    assign = O.assign, edit = O.edit, clone = O.clone, invert = O.invert;\n\n    NORMAL = STATE_ATTRIBUTES.NORMAL;\n\n    attributeMap = (function() {\n      var key, object, value, _ref;\n      _ref = object = assign(STATE_ATTRIBUTE_MODIFIERS);\n      for (key in _ref) {\n        value = _ref[key];\n        object[key] = key.toUpperCase();\n      }\n      return object;\n    })();\n\n    attributeFlags = (function() {\n      var key, object, value, _ref;\n      _ref = object = invert(STATE_ATTRIBUTES);\n      for (key in _ref) {\n        value = _ref[key];\n        object[key] = value.toLowerCase();\n      }\n      return object;\n    })();\n\n    categoryMap = assign(STATE_EXPRESSION_CATEGORIES);\n\n    synonymMap = STATE_EXPRESSION_CATEGORY_SYNONYMS;\n\n    eventTypes = assign(STATE_EVENT_TYPES);\n\n    guardActions = assign(GUARD_ACTIONS);\n\n    function StateExpression(attributes, expr) {\n      if (typeof attributes === 'string') {\n        expr || (expr = {});\n      } else if (expr == null) {\n        expr = attributes;\n        attributes = void 0;\n      }\n      if (!(expr instanceof StateExpression)) {\n        expr = interpret(expr);\n      }\n      edit('deep all', this, expr);\n      if (attributes != null) {\n        if (!isNumber(attributes)) {\n          attributes = encode(attributes);\n        }\n      } else {\n        if (expr) {\n          attributes = expr.attributes;\n        }\n      }\n      this.attributes = attributes || NORMAL;\n    }\n\n    interpret = function(expr) {\n      var category, item, key, object, result, type, value, _ref, _ref1, _ref2, _ref3;\n      result = assign(STATE_EXPRESSION_CATEGORIES, null);\n      for (key in expr) {\n        if (!__hasProp.call(expr, key)) continue;\n        value = expr[key];\n        category = categoryMap[key] || synonymMap[key];\n        if ((category != null) && (value != null)) {\n          result[category] = typeof value === 'string' ? value : isArray(value) ? value.slice(0) : clone(result[category], value);\n          continue;\n        }\n        category = value === state || value instanceof StateExpression ? 'substates' : value instanceof TransitionExpression ? 'transitions' : void 0;\n        if (category != null) {\n          item = result[category] || (result[category] = {});\n          item[key] = value;\n          continue;\n        }\n        category = (eventTypes[key] != null) || typeof value === 'string' ? 'events' : guardActions[key] != null ? 'guards' : typeof value === 'function' || (type = value != null ? value.type : void 0) && (type === 'state-bound-function' || type === 'state-fixed-function') ? 'methods' : value === NIL || isPlainObject(value) ? 'substates' : void 0;\n        if (category != null) {\n          item = result[category] || (result[category] = {});\n          item[key] = value;\n          continue;\n        }\n      }\n      _ref = object = result.events;\n      for (key in _ref) {\n        if (!__hasProp.call(_ref, key)) continue;\n        value = _ref[key];\n        if (!isArray(value)) {\n          object[key] = [value];\n        }\n      }\n      _ref1 = object = result.guards;\n      for (key in _ref1) {\n        if (!__hasProp.call(_ref1, key)) continue;\n        value = _ref1[key];\n        if (!isPlainObject(value)) {\n          object[key] = {\n            '*': value\n          };\n        }\n      }\n      _ref2 = object = result.transitions;\n      for (key in _ref2) {\n        if (!__hasProp.call(_ref2, key)) continue;\n        value = _ref2[key];\n        if (!(value === NIL || value instanceof TransitionExpression)) {\n          object[key] = new TransitionExpression(value);\n        }\n      }\n      _ref3 = object = result.substates;\n      for (key in _ref3) {\n        if (!__hasProp.call(_ref3, key)) continue;\n        value = _ref3[key];\n        if (value === state) {\n          object[key] = new StateExpression;\n        } else if (value instanceof State) {\n          object[key] = value.express(true);\n        } else if (!(value === NIL || value instanceof StateExpression)) {\n          object[key] = new StateExpression(value);\n        }\n      }\n      return result;\n    };\n\n    encode = function(attributes) {\n      var key, result, value;\n      if (typeof attributes === 'string') {\n        attributes = assign(attributes);\n      }\n      result = NORMAL;\n      for (key in attributes) {\n        if (!__hasProp.call(attributes, key)) continue;\n        value = attributes[key];\n        if (key in attributeMap) {\n          result |= STATE_ATTRIBUTES[attributeMap[key]];\n        }\n      }\n      return result;\n    };\n\n    decode = function(number) {\n      var key, value;\n      return ((function() {\n        var _results;\n        _results = [];\n        for (key in attributeFlags) {\n          value = attributeFlags[key];\n          if (number & key) {\n            _results.push(value);\n          }\n        }\n        return _results;\n      })()).join(' ');\n    };\n\n    StateExpression.untype = untype = function(expr) {\n      var key, name, result, s, subexpr, value, _ref;\n      result = {};\n      for (key in expr) {\n        if (!__hasProp.call(expr, key)) continue;\n        value = expr[key];\n        result[key] = value;\n      }\n      _ref = s = result.states;\n      for (name in _ref) {\n        subexpr = _ref[name];\n        s[name] = untype(subexpr);\n      }\n      return result;\n    };\n\n    StateExpression.encodeAttributes = encode;\n\n    StateExpression.decodeAttributes = decode;\n\n    return StateExpression;\n\n  })();\n\n}).call(this);\n"},"lineCount":197}},"error":null,"hash":"f31d681c8c937a86b5959133abb65645","cacheData":{"env":{}}}